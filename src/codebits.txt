  // fetches all characters on initial mount and when currentPage changes
  useEffect(() => {
    fetchData();
  }, [currentPage]);

  // set function that handles fetching the next page (increments the currentPage state variable and triggers data fetching)
  const fetchNextPage = async () => {
    setCurrentPage((prevPage) => prevPage + 1);
  };

  return (
    <div data-testid="app">
      <Navigation />

      <h1>characters will be here</h1>
      <CharacterCard />
      <button onClick={fetchNextPage}>Next Page</button>
    </div>
  );


const [currentPage, setCurrentPage] = useState(1); // Pagination, this will allow for moving to next page of characters and starts from page 1 

// This is the Semantic code for the search bar 
    <div className="ui icon input" >
            <input type="text" placeholder="Search..." />
            <i aria-hidden="true" class="search icon"></i>
          </div>

          <div className="ui right aligned category search item">
            <div className="ui icon input">
              <input className="prompt" type="text" placeholder="Search Star Wars..." />
              <i className="search link icon"/>
            </div>
            <div className="results" />
          </div>

From the readme, may add back in later 

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
# jediverse-MV


Background image addresses

1. "https://images.unsplash.com/photo-1506703719100-a0f3a48c0f86?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80"

2. https://images.unsplash.com/photo-1472457897821-70d3819a0e24?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1169&q=80

3. https://images.unsplash.com/photo-1598501479146-ef2b41258663?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1332&q=80

4.https://images.unsplash.com/photo-1588609889709-09a65ef625d9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80

5. https://images.unsplash.com/photo-1610524193579-35934d02c8f3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80

6. https://images.unsplash.com/photo-1592513814643-64bcbcd61076?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80

7. https://images.unsplash.com/photo-1589661654496-f5222b481fe0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80

8. https://wallpaperset.com/w/full/2/6/d/86862.jpg

9. https://cdn.wallpapersafari.com/1/97/co341S.jpg

10. https://images8.alphacoders.com/100/1005773.jpg

"https://i.pinimg.com/originals/fe/d0/7f/fed07f6053218eb7610abe9de87d620f.jpg"




//Pagination 


  const [characterData, setCharacterData] = useState([]); // state that manages character data
  const [currentPage, setCurrentPage] = useState(1); // Pagination, this will allow for moving to next page of characters and starts from page 1 

  const jediApi = `https://swapi.dev/api/people?page=${currentPage}`; // url for api, always set to current page

  // set function for pulling all characters from the api
  const fetchData = async () => {
    try {
      const response = await fetch(jediApi);
      const data = await response.json();
      setCharacterData(data.results);
      console.log(data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  // fetches all characters on initial mount and when currentPage changes
  useEffect(() => {
    fetchData();
  }, [currentPage]);

  // set function that handles fetching the next page (increments the currentPage state variable and triggers data fetching)
  const fetchNextPage = async () => {
    setCurrentPage((prevPage) => prevPage + 1);
  };